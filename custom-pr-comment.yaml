# yaml-language-server: $schema=https://fortify.github.io/fcli/schemas/action/fcli-action-schema-2.1.0.json

author: Fortify
usage:
  header: (PREVIEW) Add GitHub Pull Request review comments.
  description: |
    This action adds review comments to a GitHub Pull Request. Currently
    this is marked as PREVIEW as we build out this functionality; later
    versions may have different behavior and/or require different action
    cli.

    The current implementation simply compares current scan results
    against previous scan results in the given SSC application version,
    listing all new, re-introduced and removed issues in a new PR comment.

    For best results, this fcli action should only be run on GitHub
    pull_request triggers. Upon PR creation, a new SSC application version
    should be created, copying state from the SSC application version that
    represents the branch into which the PR will be merged, and a new scan
    should be run on the current PR branch before invoking this fcli action.

    This will ensure that scan results for the current PR will be
    compared against the latest scan results for the target branch
    upon PR creation. Optionally, new scans can be run upon PR changes,
    creating new PR comments that show the issue delta compared to the
    previous scan for this PR.

config:
  rest.target.default: ssc

cli.options:
  appversion:
    names: [--appversion, --av]
    description: "Required application version id or <appName>:<versionName>"
  filterset:
    names: [--filterset, --fs]
    description: "Filter set name or guid from which to load issue data."
    required: false
  analysis-type:
    names: [--analysis-type, -t]
    description: "Analysis type for which to list vulnerabilities."
    required: true
    default: SCA
  github-api-url:
    names: [--github-api-url]
    description: "GitHub API URL."
    required: true
    default: ${#env('GITHUB_API_URL')}
    mask:
      description: GITHUB HOST NAME
      pattern: https?://([^/]+).*
      sensitivity: low
  github-token:
    names: [--github-token]
    description: "GitHub Token."
    required: true
    default: ${#env('GITHUB_TOKEN')}
    mask:
      sensitivity: high
  github-owner:
    names: [--github-owner]
    description: "GitHub repository owner."
    required: true
    default: ${#env('GITHUB_REPOSITORY_OWNER')}
  github-repo:
    names: [--github-repo]
    description: "GitHub repository."
    required: true
    default: ${#substringAfter(#env('GITHUB_REPOSITORY'), '/')}
  pr:
    names: [--pr]
    description: "GitHub PR number."
    required: true
    default: ${#substringBefore(#env('GITHUB_REF_NAME'), '/')}
  commit:
    names: [--commit]
    description: "Commit hash."
    required: true
    default: ${#env('GITHUB_SHA')}
  dryrun:
    names: [--dryrun]
    description: "Don't post, just print payload."
    type: boolean
    required: false
    default: false

steps:
  - rest.target:
      github:
        baseUrl: ${cli['github-api-url']}
        headers:
          Authorization: Bearer ${cli['github-token']}
          X-GitHub-Api-Version: '2022-11-28'

  - var.set:
      av: ${#ssc.appVersion(cli.appversion)}
      fs: ${#ssc.filterSet(av, cli.filterset)}

  - log.progress: Processing issue data

  - rest.call:
      issues:
        uri: /api/v1/projectVersions/${av.id}/issues?limit=200
        query:
          showremoved: true
          filter: ISSUE[11111111-1111-1111-1111-111111111151]:${cli['analysis-type']}
          filterset: ${fs.guid}
        log.progress:
          page.post-process: Processed ${totalIssueCount?:0} of ${issues_raw.count} issues
        records.for-each:
          record.var-name: issue
          if: ${issue.scanStatus!='UPDATED'}
          embed:
            details:
              uri: /api/v1/issueDetails/${issue.id}
          do:
            - var.set:
                removedIssues..: { fmt: mdIssueListItem, if: "${issue.scanStatus=='REMOVED'}" }
                newIssues..: { fmt: mdIssueListItem, if: "${(issue.scanStatus=='NEW' || issue.scanStatus=='REINTRODUCED')}" }
                comments..: { fmt: mdReviewComment, if: "${issue.scanStatus!='UPDATED'}" }

  - log.progress: Generating GitHub request

  - var.set:
      reviewBody: { fmt: reviewBody }
      reviewRequestBody: { fmt: reviewRequestBody }

  - if: ${cli.dryrun}
    log.info: ${reviewRequestBody}

  - if: ${!cli.dryrun}
    rest.call:
      postPRComment:
        method: POST
        uri: /repos/${cli['github-owner']}/${cli['github-repo']}/pulls/${cli['pr']}/reviews
        target: github
        body: ${reviewRequestBody}

formatters:
  reviewRequestBody:
    owner: ${cli['github-owner']}
    repo: ${cli['github-repo']}
    pull_number: ${cli['pr']}
    commit_id: ${cli['commit']}
    body: ${reviewBody}
    event: COMMENT
    comments: ${comments}

  reviewBody: |
    ## Fortify vulnerability summary

    Any issues listed below are based on comparing the latest scan results against the previous scan results in SSC application version [${av.project.name} - ${av.name}](${#ssc.appversionBrowserUrl(av,null)}). This is for informational purposes only and, depending on workflow, may not be an accurate representation of what issues will be introduced into or removed from the target branch when merging this PR.

    ### New Issues

    ${newIssues==null 
      ? "* No new or re-introduced issues were detected" 
      : ("* "+#join('\n* ',newIssues))}

    ### Removed Issues

    ${removedIssues==null 
      ? "* No removed issues were detected" 
      : ("* "+#join('\n* ',removedIssues))}

  mdIssueListItem: "${issue.scanStatus} (${issue.engineCategory}) - ${issue.issueName}: [${issue.fullFileName}${issue.lineNumber==null?'':':'+issue.lineNumber}](${#ssc.issueBrowserUrl(issue,fs)})"

  mdReviewComment: |
    {
      "path": "${#substringAfter(issue.fullFileName, '/src/')}",
      "position": ${issue.lineNumber?:1},
      "body": "**${issue.scanStatus}** ${issue.issueName} (${issue.engineCategory}) - See details: ${#ssc.issueBrowserUrl(issue,fs)}"
    }
